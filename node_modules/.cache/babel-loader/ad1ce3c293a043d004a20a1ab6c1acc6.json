{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\react\\\\hello-react\\\\src\\\\Context.jsx\";\nimport React from \"react\";\nexport default class ContextTest extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(Toolbar, {\n      theme: \"dark\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 4,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nfunction Toolbar(props) {\n  // Toolbar 组件接受一个额外的“theme”属性，然后传递给 ThemedButton 组件。\n  // 如果应用中每一个单独的按钮都需要知道 theme 的值，这会是件很麻烦的事，\n  // 因为必须将这个值层层传递所有组件。\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ThemedButton, {\n      theme: props.theme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Toolbar;\n\nclass ThemedButton extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        theme: this.props.theme,\n        onClick: () => {\n          alert(`${this.props.theme}`);\n        },\n        children: \"\\u6309\\u94AE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Toolbar\");","map":{"version":3,"sources":["D:/react/hello-react/src/Context.jsx"],"names":["React","ContextTest","Component","render","Toolbar","props","theme","ThemedButton","alert"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,eAAgB,MAAMC,WAAN,SAA0BD,KAAK,CAACE,SAAhC,CAA0C;AACtDC,EAAAA,MAAM,GAAG;AACL,wBAAO,QAAC,OAAD;AAAS,MAAA,KAAK,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAHqD;;AAK1D,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACpB;AACA;AACA;AACA,sBACI;AAAA,2BACI,QAAC,YAAD;AAAc,MAAA,KAAK,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;KATQF,O;;AAUR,MAAMG,YAAN,SAA2BP,KAAK,CAACE,SAAjC,CAA2C;AACxCC,EAAAA,MAAM,GAAG;AAEL,wBACI;AAAA,6BACI;AAAQ,QAAA,KAAK,EAAE,KAAKE,KAAL,CAAWC,KAA1B;AAAiC,QAAA,OAAO,EAAE,MAAM;AACvCE,UAAAA,KAAK,CAAE,GAAE,KAAKH,KAAL,CAAWC,KAAM,EAArB,CAAL;AACA,SAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAUH;;AAbuC","sourcesContent":["import React from \"react\";\r\nexport default  class ContextTest extends React.Component {\r\n    render() {\r\n        return <Toolbar theme=\"dark\" />;\r\n    }\r\n}\r\nfunction Toolbar(props) {\r\n    // Toolbar 组件接受一个额外的“theme”属性，然后传递给 ThemedButton 组件。\r\n    // 如果应用中每一个单独的按钮都需要知道 theme 的值，这会是件很麻烦的事，\r\n    // 因为必须将这个值层层传递所有组件。\r\n    return (\r\n        <div>\r\n            <ThemedButton theme={props.theme} />\r\n        </div>\r\n    );\r\n}\r\n class ThemedButton extends React.Component {\r\n    render() {\r\n\r\n        return(\r\n            <div>\r\n                <button theme={this.props.theme} onClick={() => {\r\n                         alert(`${this.props.theme}`)\r\n                        }} >\r\n                    按钮\r\n                </button>\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}