{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\react\\\\hello-react\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nconst scaleNames = {\n  c: '摄氏温度',\n  f: '华氏温度'\n};\n\nfunction toCelsius(fahrenheit) {\n  return (fahrenheit - 32) * 5 / 9;\n}\n\nfunction toFahrenheit(celsius) {\n  return celsius * 9 / 5 + 32;\n}\n\nfunction tryConvert(temperature, convert) {\n  const input = parseFloat(temperature);\n\n  if (Number.isNaN(input)) {\n    return '';\n  }\n\n  const output = convert(input);\n  const rounded = Math.round(output * 1000) / 1000;\n  return rounded.toString();\n}\n\nfunction BoilingVerdict(props) {\n  if (props.celsius >= 100) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u6C34\\u5F00\\u4E86.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"\\u6C34\\u5F00\\u4E86.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 12\n  }, this);\n}\n\n_c = BoilingVerdict;\n\nclass TemperatureInput extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleChange = e => {\n      this.props.onTemperatureChange(e.target.value);\n    };\n  }\n\n  render() {\n    const temperature = this.props.temperature;\n    const scale = this.props.scale;\n    return /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n        children: [\"\\u8BF7\\u8F93\\u5165 \", scaleNames[scale], \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: temperature,\n        onChange: this.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCelsiusChange = temperature => {\n      this.setState({\n        scale: 'c',\n        temperature\n      });\n    };\n\n    this.handleFahrenheitChange = temperature => {\n      this.setState({\n        scale: 'f',\n        temperature\n      });\n    };\n\n    this.state = {\n      temperature: '',\n      scale: 'c'\n    };\n  }\n\n  render() {\n    const scale = this.state.scale;\n    const temperature = this.state.temperature;\n    const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;\n    const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(TemperatureInput, {\n        scale: \"c\",\n        temperature: celsius,\n        onTemperatureChange: this.handleCelsiusChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TemperatureInput, {\n        scale: \"f\",\n        temperature: fahrenheit,\n        onTemperatureChange: this.handleFahrenheitChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(BoilingVerdict, {\n        celsius: parseFloat(celsius)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"BoilingVerdict\");","map":{"version":3,"sources":["D:/react/hello-react/src/App.js"],"names":["React","Component","scaleNames","c","f","toCelsius","fahrenheit","toFahrenheit","celsius","tryConvert","temperature","convert","input","parseFloat","Number","isNaN","output","rounded","Math","round","toString","BoilingVerdict","props","TemperatureInput","handleChange","e","onTemperatureChange","target","value","render","scale","App","constructor","handleCelsiusChange","setState","handleFahrenheitChange","state"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\n\r\nconst scaleNames = {\r\n    c: '摄氏温度',\r\n    f: '华氏温度'\r\n};\r\n\r\nfunction toCelsius(fahrenheit) {\r\n    return (fahrenheit - 32) * 5 / 9;\r\n}\r\n\r\nfunction toFahrenheit(celsius) {\r\n    return (celsius * 9 / 5) + 32;\r\n}\r\n\r\nfunction tryConvert(temperature, convert) {\r\n    const input = parseFloat(temperature);\r\n    if (Number.isNaN(input)) {\r\n        return '';\r\n    }\r\n    const output = convert(input);\r\n    const rounded = Math.round(output * 1000) / 1000;\r\n    return rounded.toString();\r\n}\r\n\r\nfunction BoilingVerdict(props) {\r\n    if (props.celsius >= 100) {\r\n        return <p>水开了.</p>;\r\n    }\r\n    return <p>水开了.</p>;\r\n}\r\n\r\nclass TemperatureInput extends React.Component {\r\n    handleChange = (e) => {\r\n        this.props.onTemperatureChange(e.target.value);\r\n    }\r\n\r\n    render() {\r\n        const temperature = this.props.temperature;\r\n        const scale = this.props.scale;\r\n        return (\r\n            <fieldset>\r\n                <legend>请输入 {scaleNames[scale]}:</legend>\r\n                <input value={temperature}\r\n                       onChange={this.handleChange}/>\r\n            </fieldset>\r\n        );\r\n    }\r\n}\r\n\r\nexport default class App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {temperature: '', scale: 'c'};\r\n    }\r\n\r\n    handleCelsiusChange = (temperature) => {\r\n        this.setState({scale: 'c', temperature});\r\n    }\r\n\r\n    handleFahrenheitChange = (temperature) => {\r\n        this.setState({scale: 'f', temperature});\r\n    }\r\n\r\n    render() {\r\n        const scale = this.state.scale;\r\n        const temperature = this.state.temperature;\r\n        const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;\r\n        const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;\r\n\r\n        return (\r\n            <div>\r\n                <TemperatureInput\r\n                    scale=\"c\"\r\n                    temperature={celsius}\r\n                    onTemperatureChange={this.handleCelsiusChange}/>\r\n                <TemperatureInput\r\n                    scale=\"f\"\r\n                    temperature={fahrenheit}\r\n                    onTemperatureChange={this.handleFahrenheitChange}/>\r\n                <BoilingVerdict\r\n                    celsius={parseFloat(celsius)}/>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}