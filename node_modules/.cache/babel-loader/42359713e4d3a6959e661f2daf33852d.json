{"ast":null,"code":"import \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\react\\\\hello-react\\\\src\\\\App.js\";\nimport React from 'react';\n// Context 可以让我们无须明确地传遍每一个组件，就能将值深入传递进组件树。\n// 为当前的 theme 创建一个 context（“light”为默认值）。\nconst ThemeContext = /*#__PURE__*/React.createContext('light');\n\nclass ThemedButton extends React.Component {\n  render() {\n    // 使用一个 Provider 来将当前的 theme 传递给以下的组件树。\n    // 无论多深，任何组件都能读取这个值。\n    // 在这个例子中，我们将 “dark” 作为当前的值传递下去。\n    return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n      value: \"dark\",\n      children: /*#__PURE__*/_jsxDEV(Toolbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this);\n  }\n\n} // 中间的组件再也不必指明往下传递 theme 了。\n\n\nfunction Toolbar() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ThemedButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Toolbar;\nexport default class App extends React.Component {\n  // 指定 contextType 读取当前的 theme context。\n  // React 会往上找到最近的 theme Provider，然后使用它的值。\n  // 在这个例子中，当前的 theme 值为 “dark”。\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"nknklnkl\", /*#__PURE__*/_jsxDEV(_Button, {\n        theme: this.context,\n        type: \"primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nApp.contextType = ThemeContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"Toolbar\");","map":{"version":3,"sources":["D:/react/hello-react/src/App.js"],"names":["React","ThemeContext","createContext","ThemedButton","Component","render","Toolbar","App","context","contextType"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA;AACA;AACA,MAAMC,YAAY,gBAAGD,KAAK,CAACE,aAAN,CAAoB,OAApB,CAArB;;AACC,MAAMC,YAAN,SAA2BH,KAAK,CAACI,SAAjC,CAA2C;AACxCC,EAAAA,MAAM,GAAG;AACL;AACA;AACA;AACA,wBACI,QAAC,YAAD,CAAc,QAAd;AAAuB,MAAA,KAAK,EAAC,MAA7B;AAAA,6BACI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AAVuC,C,CAa5C;;;AACA,SAASC,OAAT,GAAmB;AACf,sBACI;AAAA,2BACI,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;KANQA,O;AAQT,eAAgB,MAAMC,GAAN,SAAkBP,KAAK,CAACI,SAAxB,CAAkC;AAC9C;AACA;AACA;AAEAC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,0CAEA;AAAQ,QAAA,KAAK,EAAE,KAAKG,OAApB;AAA6B,QAAA,IAAI,EAAC;AAAlC;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH;;AAb6C;AAA5BD,G,CAIXE,W,GAAcR,Y","sourcesContent":["import React from 'react';\r\nimport {Button} from \"antd\";\r\n// Context 可以让我们无须明确地传遍每一个组件，就能将值深入传递进组件树。\r\n// 为当前的 theme 创建一个 context（“light”为默认值）。\r\nconst ThemeContext = React.createContext('light');\r\n class ThemedButton extends React.Component {\r\n    render() {\r\n        // 使用一个 Provider 来将当前的 theme 传递给以下的组件树。\r\n        // 无论多深，任何组件都能读取这个值。\r\n        // 在这个例子中，我们将 “dark” 作为当前的值传递下去。\r\n        return (\r\n            <ThemeContext.Provider value=\"dark\">\r\n                <Toolbar />\r\n            </ThemeContext.Provider>\r\n        );\r\n    }\r\n}\r\n\r\n// 中间的组件再也不必指明往下传递 theme 了。\r\nfunction Toolbar() {\r\n    return (\r\n        <div>\r\n            <ThemedButton />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport  default class App extends React.Component {\r\n    // 指定 contextType 读取当前的 theme context。\r\n    // React 会往上找到最近的 theme Provider，然后使用它的值。\r\n    // 在这个例子中，当前的 theme 值为 “dark”。\r\n    static contextType = ThemeContext;\r\n    render() {\r\n        return(\r\n            <div>\r\n                nknklnkl\r\n            <Button theme={this.context} type='primary' />\r\n        </div>\r\n        );\r\n\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}