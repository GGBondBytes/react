{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\react\\\\hello-react\\\\src\\\\Context.jsx\";\nimport React from \"react\";\n\nclass Context_test extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(Toolbar, {\n      theme: \"dark\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 4,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nfunction Toolbar(props) {\n  // Toolbar 组件接受一个额外的“theme”属性，然后传递给 ThemedButton 组件。\n  // 如果应用中每一个单独的按钮都需要知道 theme 的值，这会是件很麻烦的事，\n  // 因为必须将这个值层层传递所有组件。\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ThemedButton, {\n      theme: props.theme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Toolbar;\nexport default class ThemedButton extends React.Component {\n  render() {\n    const theme = this.props.theme;\n    console.log(theme);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        theme: this.props.theme,\n        children: \"\\u6309\\u94AE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Toolbar\");","map":{"version":3,"sources":["D:/react/hello-react/src/Context.jsx"],"names":["React","Context_test","Component","render","Toolbar","props","theme","ThemedButton","console","log"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,MAAMC,YAAN,SAA2BD,KAAK,CAACE,SAAjC,CAA2C;AACvCC,EAAAA,MAAM,GAAG;AACL,wBAAO,QAAC,OAAD;AAAS,MAAA,KAAK,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAHsC;;AAM3C,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACpB;AACA;AACA;AACA,sBACI;AAAA,2BACI,QAAC,YAAD;AAAc,MAAA,KAAK,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;KATQF,O;AAWR,eAAe,MAAMG,YAAN,SAA2BP,KAAK,CAACE,SAAjC,CAA2C;AACvDC,EAAAA,MAAM,GAAG;AACL,UAAMG,KAAK,GAAC,KAAKD,KAAL,CAAWC,KAAvB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA,wBACI;AAAA,6BACI;AAAQ,QAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAUH;;AAdsD","sourcesContent":["import React from \"react\";\r\nclass Context_test extends React.Component {\r\n    render() {\r\n        return <Toolbar theme=\"dark\" />;\r\n    }\r\n}\r\n\r\nfunction Toolbar(props) {\r\n    // Toolbar 组件接受一个额外的“theme”属性，然后传递给 ThemedButton 组件。\r\n    // 如果应用中每一个单独的按钮都需要知道 theme 的值，这会是件很麻烦的事，\r\n    // 因为必须将这个值层层传递所有组件。\r\n    return (\r\n        <div>\r\n            <ThemedButton theme={props.theme} />\r\n        </div>\r\n    );\r\n}\r\n\r\n export default class ThemedButton extends React.Component {\r\n    render() {\r\n        const theme=this.props.theme;\r\n        console.log(theme)\r\n        return(\r\n            <div>\r\n                <button theme={this.props.theme} >\r\n                    按钮\r\n                </button>\r\n\r\n            </div>\r\n\r\n        )\r\n\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}